// flexgap
@mixin flexbox($gap: 0, $dir: row) {
  display: flex;
  flex-direction: $dir;

  @if $dir == row {
    & > * {
      margin: 0 $gap / 2;
    }

    & > :first-child {
      margin-left: 0;
    }

    & > :last-child {
      margin-right: 0;
    }
  } @else if $dir == column {
    & > * {
      margin-bottom: $gap / 2;
    }

    & > :first-child {
      margin-top: 0;
    }

    & > :last-child {
      margin-bottom: 0;
    }
  }
}

// pure-g gutters (mixin & helper)
@mixin gutters($size: 1) {
  $unit: 1rem !default;
  $size: if(unitless($size), $size * $unit, $size);

  .pure-g.gutters {
    margin-left: -$size / 2;
    margin-right: -$size / 2;
  }

  .pure-g.gutters > [class *=pure-u] {
    box-sizing: border-box;
    padding-left: $size / 2;
    padding-right: $size / 2;
  }
}
@include gutters;

// flex alignment
@mixin flex-align($horizontal: center, $vertical: center) {
  display: flex;
  justify-content: $horizontal;
  align-items: $vertical;

  > * {
    margin: 0;
  }
}

// Enable absolute positioning on children
@mixin absolute-layout() {
  position: relative;

  .bottom,
  .left,
  .right,
  .top {
    position: absolute;
  }

  .left {
    left: 0;
  }

  .right {
    right: 0;
  }

  .top {
    top: 0;
  }

  .bottom {
    bottom: 0;
  }
}

// Simulates CSS Grid
// Tips:
// - Avoid very large gaps
@mixin flexgrid($gap: 0, $columns: 3) {
  $unit: 1rem !default;
  $gutter: if(unitless($gap), $gap * $unit, $gap);

  flex: 1 0 calc((100% / #{$columns}) - #{$gutter});
  margin: $gap / 2;
  box-sizing: border-box;

  &:nth-of-type(#{$columns}n + 1) {
    margin-left: 0;
  }

  &:nth-of-type(#{$columns}n),
  &:nth-last-of-type(1) {
    margin-right: 0;
  }

  &:nth-of-type(-n + #{$columns}) {
    margin-top: 0;
  }

  // targets to the last row items
  &:nth-of-type(#{$columns}n + 1):nth-last-of-type(-n + #{$columns}),
  &:nth-of-type(#{$columns}n + 1):nth-last-of-type(-n + #{$columns}) ~ * {
    margin-bottom: 0;
  }
}
