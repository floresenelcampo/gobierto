---
version: 2
jobs:
  build:
    working_directory: ~/gobierto
    docker:
      - image: circleci/ruby:2.5.3-node
        environment:
          RAILS_ENV: test
          PGHOST: localhost
          PGUSER: gobierto
          # Disable spring so bin/rails works. See: https://github.com/rails/spring/pull/546
          DISABLE_SPRING: true
      - image: postgres:9.6
        environment:
          POSTGRES_USER: gobierto
          POSTGRES_DB: gobierto_test
          POSTGRES_PASSWORD: ""
      - image: elasticsearch:2.4.1
      - image: redis:4.0.9
    steps:
      - checkout

      - restore_cache:
          name: "[Bundler] Restore cache"
          keys:
            - gobierto-{{ checksum "Gemfile.lock" }}

      - run:
          name: "[Bundler] Install dependencies"
          command: bundle install --path vendor/bundle --jobs=4 --retry=3  --without development

      - save_cache:
          name: "[Bundler] Cache dependencies"
          key: gobierto-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: Install phantomjs
          command: |
            sudo curl --output /tmp/phantomjs https://s3.amazonaws.com/circle-downloads/phantomjs-2.1.1
            sudo chmod ugo+x /tmp/phantomjs
            sudo ln -sf /tmp/phantomjs /usr/local/bin/phantomjs

      - restore_cache:
          name: "[Yarn] Restore cache"
          keys:
            - gobierto-yarn-{{ checksum "yarn.lock" }}
            - gobierto-yarn-

      - run:
          name: "[Yarn] Install dependencies"
          command: yarn install --cache-folder ~/.cache/yarn

      - save_cache:
          name: "[Yarn] Cache dependencies"
          key: gobierto-yarn-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      # Wait for DB containers to be ready
      - run: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: dockerize -wait tcp://localhost:9200 -timeout 1m
      - run: dockerize -wait tcp://localhost:6379 -timeout 1m

      # Copy database config
      - run: cp config/database.yml.example config/database.yml

      # Setup the environment
      - run: cp .env.example .env

      # Setup the database
      - run: bin/rails db:setup

      # Install custom engines
      - run: script/custom_engines_ci_setup

      # Run tests
      - run: script/test

  staging-deploy:
    machine:
        enabled: true
    working_directory: ~/gobierto
    steps:
      # deploy script is in the repository
      - checkout

      - run:
          name: Deploy staging branch
          command: script/staging_deploy.sh

  production-deploy:
    machine:
        enabled: true
    working_directory: ~/gobierto
    steps:
      # deploy script is in the repository
      - checkout

      - run:
          name: Deploy master branch
          command: script/production_deploy.sh

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - staging-deploy:
          requires:
            - build
          filters:
            branches:
              only: staging
      - production-deploy:
          requires:
            - build
          filters:
            branches:
              only: master
